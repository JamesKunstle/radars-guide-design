import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";

/* eslint-disable no-console */
import * as fs from 'fs';
import * as yargs from 'yargs';
import { getCommodityColumns } from '../columns/commodities.columns';
import { getEmployeeColumns } from '../columns/employees.columns';
import { getRealGridData } from '../services';

var loadData = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(size, dataset) {
    var result;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getRealGridData(Number(size), dataset.toLowerCase() === 'commodity' ? getCommodityColumns() : getEmployeeColumns());

          case 2:
            result = _context.sent;
            return _context.abrupt("return", result.rows);

          case 4:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function loadData(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

export function datagenCli() {
  yargs.command({
    command: '$0',
    describe: 'Generates Component.propTypes from TypeScript declarations',
    builder: function builder(command) {
      return command.option('dataset', {
        default: '',
        describe: 'A dataset can be "commodity" | "employee"',
        type: 'string'
      }).option('output', {
        default: '',
        describe: 'The output file, if not passed, it will generate "./<dataset>-<size>.json"',
        type: 'string'
      }).option('pretty', {
        default: false,
        describe: 'Print a prettier output',
        type: 'boolean'
      }).option('size', {
        default: '1000',
        describe: 'The number of rows to generate',
        type: 'string'
      });
    },
    handler: function handler(argv) {
      console.log("Generating new ".concat(argv.dataset, " dataset with ").concat(Number(argv.size).toLocaleString(), " rows"));
      loadData(Number(argv.size), argv.dataset).then(function (data) {
        var output = !argv.output ? "./".concat(argv.dataset, "-").concat(argv.size, ".json") : argv.output;
        console.log("Saving generated dataset in ".concat(output));
        fs.writeFileSync(output, JSON.stringify(data, null, argv.pretty ? 2 : undefined));
      });
    }
  }).help().strict(true).version(false).parse();
}