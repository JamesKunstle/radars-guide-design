"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.datagenCli = datagenCli;

var fs = _interopRequireWildcard(require("fs"));

var yargs = _interopRequireWildcard(require("yargs"));

var _commodities = require("../columns/commodities.columns");

var _employees = require("../columns/employees.columns");

var _services = require("../services");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable no-console */
const loadData = async (size, dataset) => {
  const result = await (0, _services.getRealGridData)(Number(size), dataset.toLowerCase() === 'commodity' ? (0, _commodities.getCommodityColumns)() : (0, _employees.getEmployeeColumns)());
  return result.rows;
};

function datagenCli() {
  yargs.command({
    command: '$0',
    describe: 'Generates Component.propTypes from TypeScript declarations',
    builder: command => {
      return command.option('dataset', {
        default: '',
        describe: 'A dataset can be "commodity" | "employee"',
        type: 'string'
      }).option('output', {
        default: '',
        describe: 'The output file, if not passed, it will generate "./<dataset>-<size>.json"',
        type: 'string'
      }).option('pretty', {
        default: false,
        describe: 'Print a prettier output',
        type: 'boolean'
      }).option('size', {
        default: '1000',
        describe: 'The number of rows to generate',
        type: 'string'
      });
    },
    handler: argv => {
      console.log(`Generating new ${argv.dataset} dataset with ${Number(argv.size).toLocaleString()} rows`);
      loadData(Number(argv.size), argv.dataset).then(data => {
        const output = !argv.output ? `./${argv.dataset}-${argv.size}.json` : argv.output;
        console.log(`Saving generated dataset in ${output}`);
        fs.writeFileSync(output, JSON.stringify(data, null, argv.pretty ? 2 : undefined));
      });
    }
  }).help().strict(true).version(false).parse();
}